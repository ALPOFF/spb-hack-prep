{"version":3,"sources":["api/api.js","state/map-reducer.js","state/map-selectors.js","components/Map/Map.jsx","components/Forms/TaskFilterForm.jsx","components/TaskPanel/common/ReduxFormComponents/DateTimePicker/renderDateTimePicker.js","components/TaskPanel/common/ReduxFormComponents/CoordAddressComponent/renderCoordAddress.js","components/Forms/TaskReduxForm.jsx","containers/MapContainer/MapContainer.jsx","components/Header/Header.jsx","App.js","serviceWorker.js","state/redux-store.js","index.js","components/Forms/TaskFilterForm.module.css"],"names":["taskAPI","axios","withCredentials","baseURL","headers","taskName","idWorker","description","deadline","taskAddress","params","id","coordPoint","initialState","coordsTemp","addressTemp","workers","name","tasks","testData","tsk","time","filteredTasks","setData","type","mapReducer","state","action","address","coords","coordPointAdd","filter","t","getCoordTempSelector","getWorkersSelector","getTasksSelector","getTestDataSelector","getAddressTempSelector","getFilteredTasks","YandexMaps","getAddress","delCoordPoint","searchControlRef","useRef","enterprise","query","apikey","className","onClick","e","get","defaultState","center","zoom","undefined","pointId","geometry","_coordinates","properties","hintContent","modules","onResultShow","current","b","getMap","console","log","instanceRef","options","float","noPlacemark","TaskFilterForm","w","taskFilter","styles","ppp","onChange","currentTarget","value","map","key","Date","String","momentLocalizer","moment","renderDateTimePicker","input","showTime","format","MyCustomInput","props","TaskReduxForm","reduxForm","form","enableReinitialize","handleSubmit","Form","onSubmit","Field","placeholder","component","MapContainer","this","requestWorkers","requestTasks","initialValues","formData","setTask","Component","connect","dispatch","then","response","data","GeoObjectCollection","featureMember","GeoObject","metaDataProperty","GeocoderMetaData","text","setAddress","Header","App","classname","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.50fd36e6.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\n\r\nconst instance =  axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://geotestback.herokuapp.com/',\r\n    headers: {}\r\n});\r\n\r\nexport const taskAPI = {\r\n    sendTask(taskName, idWorker, description, deadline, taskAddress) {\r\n        return axios.post(`http://localhost:3000/`, {taskName: taskName, idWorker: idWorker, description: description, deadline: deadline, taskAddress: taskAddress});\r\n    },\r\n\r\n    getTasks() {\r\n        return axios.get(`https://geotestback.herokuapp.com/task/`);\r\n    },\r\n\r\n    getWorkers() {\r\n        return axios.get(`https://geotestback.herokuapp.com/worker/`, { params: {id: \"*\"}});\r\n    },\r\n\r\n    geodecode(coordPoint) {\r\n        return axios.get(`https://geocode-maps.yandex.ru/1.x/?format=json&apikey=a2b8af4a-0675-4706-aafc-c386bc1661ee&geocode=${coordPoint[1]},${coordPoint[0]}`)\r\n    }\r\n};\r\n","import {taskAPI} from \"../api/api\";\r\n\r\nconst DEL_COORD_POINT = 'map/DEL_COORD_POINT';\r\nconst SET_TASK = 'map/SET_TASK';\r\nconst SET_ADDRESS = 'map/SET_ADDRESS';\r\nconst SET_TASKS_ARR = 'map/SET_TASKS_ARR';\r\nconst SET_WORKERS = 'map/SET_WORKERS';\r\nconst TASK_FILTER = 'map/TASK_FILTER';\r\n\r\nlet initialState = {\r\n    coordsTemp: [],\r\n    addressTemp: {},\r\n    workers: [\r\n        {id: 0, name: \"Lex\"},\r\n        {id: 1, name: \"Lev\"},\r\n        {id: 2, name: \"Nik\"},\r\n        {id: 3, name: \"Lis\"}\r\n    ],\r\n    tasks: [],\r\n    testData: [{tsk: \"tsk1\", time: '1995-12-19T03:24:00'}, {tsk: \"tsk2\", time: '2019-10-25T21:29:00'}, {\r\n        tsk: \"tsk3\",\r\n        time: '2019-10-25T22:28:00'\r\n    }],\r\n    filteredTasks: []\r\n};\r\n\r\nlet mapReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TASK:\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, {\r\n                    taskName: action.taskName,\r\n                    idWorker: action.idWorker,\r\n                    description: action.description,\r\n                    deadline: action.deadline,\r\n                    address: action.taskAddress\r\n                }],\r\n                addressTemp: []\r\n            };\r\n        case SET_TASKS_ARR:\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks\r\n            };\r\n        case DEL_COORD_POINT:\r\n            return {\r\n                ...state,\r\n                addressTemp: {}\r\n            };\r\n        case SET_ADDRESS:\r\n            return {\r\n                ...state,\r\n                addressTemp: {address: action.address, coords: action.coordPointAdd}\r\n            };\r\n        case SET_WORKERS:\r\n            return {\r\n                ...state,\r\n                workers: action.workers\r\n            };\r\n        case TASK_FILTER:\r\n            return {\r\n                ...state,\r\n                filteredTasks: (action.id === 'all_tasks')\r\n                    ? state.tasks\r\n                    : state.tasks.filter(t => t.idWorker === action.id)\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const taskFilter = (id) => {\r\n    return {\r\n        type: TASK_FILTER,\r\n        id\r\n    }\r\n};\r\n\r\nexport const setAddress = (address, coordPointAdd) => {\r\n    return {\r\n        type: SET_ADDRESS,\r\n        address,\r\n        coordPointAdd\r\n    }\r\n};\r\n\r\nexport const delCoordPoint = (pointId) => {\r\n    return {\r\n        type: DEL_COORD_POINT,\r\n        pointId\r\n    }\r\n};\r\n\r\nexport const setData = (taskName, idWorker, description, deadline, taskAddress) => {\r\n    return {\r\n        type: SET_TASK,\r\n        taskName,\r\n        idWorker,\r\n        description,\r\n        deadline,\r\n        taskAddress\r\n    }\r\n};\r\n\r\nexport const setTasksArr = (tasks) => {\r\n    return {\r\n        type: SET_TASKS_ARR,\r\n        tasks\r\n    }\r\n};\r\n\r\nexport const setWorkers = (workers) => {\r\n    return {\r\n        type: SET_WORKERS,\r\n        workers\r\n    }\r\n}\r\n\r\nexport const getAddress = (coordPointAdd) => {\r\n    return (dispatch) => {\r\n        taskAPI.geodecode(coordPointAdd).then(response => {\r\n            let address = response.data.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.text;\r\n            dispatch(setAddress(address, coordPointAdd))\r\n        })\r\n    }\r\n};\r\n\r\n//send task to server + set task in state store\r\nexport const setTask = (taskName, idWorker, description, deadline, taskAddress) => {\r\n    return (dispatch) => {\r\n        taskAPI.sendTask(taskName, idWorker, description, deadline, taskAddress).then(response => {\r\n            dispatch(setData(taskName, idWorker, description, deadline, taskAddress))\r\n        })\r\n    }\r\n};\r\n\r\n//request list of tasks\r\nexport const requestTasks = () => {\r\n    return (dispatch) => {\r\n        taskAPI.getTasks().then(response => {\r\n            dispatch(setTasksArr(response.data))\r\n        })\r\n    }\r\n};\r\n\r\n//request list of workers\r\nexport const requestWorkers = () => {\r\n    return (dispatch) => {\r\n        taskAPI.getWorkers().then(response => {\r\n            dispatch(setWorkers(response.data))\r\n        })\r\n    }\r\n};\r\n\r\nexport default mapReducer;\r\n","export const getCoordTempSelector = (state) => {\r\n    return state.mapReducer.coordsTemp\r\n};\r\n\r\nexport const getWorkersSelector = (state) => {\r\n    return state.mapReducer.workers\r\n};\r\n\r\nexport const getTasksSelector = (state) => {\r\n    return state.mapReducer.tasks\r\n};\r\n\r\nexport const getTestDataSelector = (state) => {\r\n    return state.mapReducer.testData\r\n};\r\n\r\nexport const getAddressTempSelector = (state) => {\r\n    return state.mapReducer.addressTemp\r\n};\r\nexport const getFilteredTasks = (state) => {\r\n    return state.mapReducer.filteredTasks\r\n}\r\n\r\n","import React, {useRef} from \"react\";\r\nimport {Map, Placemark, SearchControl, YMaps} from \"react-yandex-maps\";\r\nimport \"./Map.css\";\r\n\r\nlet YandexMaps = ({getAddress, delCoordPoint, addressTemp}) => {\r\n    const searchControlRef = useRef(null);\r\n\r\n    const placeMark = {\r\n        //geometry: props.coords,\r\n        properties: {\r\n            hintContent: `Пункт назначения`,\r\n            /*\r\n                        balloonContent: 'Это балун',\r\n            */\r\n            //iconContent: \"Средний уровень\"\r\n        },\r\n        modules: [/*'geoObject.addon.balloon',*/ 'geoObject.addon.hint', 'geocode']\r\n    };\r\n\r\n    let setCoordPoint = (e) => {\r\n        debugger\r\n        let coordPoint = e.get(\"coords\");\r\n        getAddress(coordPoint);\r\n    };\r\n\r\n    let removeCoordPoint = (e) => {\r\n        let pointId = e.get('target').geometry._coordinates;\r\n        delCoordPoint(pointId)\r\n    };\r\n\r\n    const onResultShow = () => {\r\n        if (searchControlRef.current) {\r\n            // Тут вызвать метод который наиболее подходит\r\n            // https://tech.yandex.ru/maps/jsapi/doc/2.1/ref/reference/control.SearchControl-docpage/\r\n            let b = searchControlRef.current.getMap();\r\n            console.log(b)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <YMaps enterprise\r\n               query={{\r\n                   apikey: 'a2b8af4a-0675-4706-aafc-c386bc1661ee',\r\n               }}>\r\n            <div className=\"htm\">\r\n                <Map className=\"content_map\" onClick={setCoordPoint}\r\n                     defaultState={{center: [59.927575, 30.326017], zoom: 9}}>\r\n                    {(addressTemp.coords !== undefined) &&\r\n                    <Placemark onClick={removeCoordPoint} geometry={addressTemp.coords} {...placeMark} />}\r\n                    <SearchControl onResultShow={onResultShow} instanceRef={searchControlRef}\r\n                                   options={{float: 'left', noPlacemark: true}}/>\r\n                </Map>\r\n            </div>\r\n        </YMaps>\r\n    )\r\n};\r\n\r\nexport default YandexMaps;\r\n","import React from \"react\";\r\nimport styles from \"./TaskFilterForm.module.css\"\r\n\r\nconst TaskFilterForm = ({w, filteredTasks, taskFilter}) => {\r\n\r\n    let onChangeFilter = (e) => {\r\n        let id = e.currentTarget.value;\r\n        taskFilter(id)\r\n    };\r\n\r\n    return <div className={styles.ppp}>\r\n        <select onChange={onChangeFilter}>\r\n            <option value=\"\">Select worker for filtering ...</option>\r\n            <option value=\"all_tasks\">Show All Tasks</option>\r\n            {w.map(w => (\r\n                <option value={w.id} key={w.name}>\r\n                    {w.name}\r\n                </option>\r\n            ))}\r\n        </select>\r\n\r\n        <div className=\"tasks\">\r\n            {filteredTasks.map(t => (new Date(t.deadline) < new Date())\r\n                ? <div key={t.name}>Время истекло</div>\r\n                : <div key={t.name} className=\"taskItemLI\">\r\n                    <ul className=\"taskItemUL\">\r\n                    </ul>\r\n                    <ul>\r\n                        <li>Task - {t.description}</li>\r\n                        <li>Worker - {w.map(w => {\r\n                            if (w.id == t.idWorker) return w.name\r\n                        })}</li>\r\n                        <li>Address - {t.address.address}</li>\r\n                        <li>Deadline - {String(t.deadline)}</li>\r\n                    </ul>\r\n                </div>)}\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default TaskFilterForm;\r\n","import DateTimePicker from \"react-widgets/lib/DateTimePicker\";\r\nimport React from \"react\";\r\nimport momentLocalizer from \"react-widgets-moment\"\r\nimport 'react-widgets/dist/css/react-widgets.css'\r\nimport moment from \"moment\";\r\nmomentLocalizer(moment);\r\n\r\n\r\n\r\nexport const renderDateTimePicker = ({input: {onChange, value}, showTime}) => {\r\n    return (\r\n        <DateTimePicker\r\n            onChange={onChange}\r\n            format=\"DD MMM YYYY\"\r\n            time={showTime}\r\n            value={!value ? null : new Date(value)}\r\n        />)\r\n};\r\n","import React from 'react'\r\n\r\nconst MyCustomInput = (props) => {\r\n    return (\r\n        <div className=\"tasks\">\r\n            <ul onChange={e => props.input.onChange(e)}>\r\n                {props.input.value.address}\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MyCustomInput\r\n","import {Field, Form, reduxForm} from \"redux-form\";\r\nimport {renderDateTimePicker} from \"../TaskPanel/common/ReduxFormComponents/DateTimePicker/renderDateTimePicker\";\r\nimport MyCustomInput from \"../TaskPanel/common/ReduxFormComponents/CoordAddressComponent/renderCoordAddress\";\r\nimport React from \"react\";\r\nimport styles from \"./TaskFilterForm.module.css\"\r\n\r\nconst TaskForm = ({handleSubmit, w}) => {\r\n    return <Form className={styles.ppp} onSubmit={handleSubmit}>\r\n        <div className=\"formItems\" >\r\n            <Field placeholder={\"Enter title of task...\"} name={\"taskName\"} component={\"input\"}/>\r\n        </div>\r\n        <div className=\"formItems\">\r\n            <Field placeholder={\"Enter task...\"} name={\"description\"} component={\"textarea\"}/>\r\n        </div>\r\n        <div className=\"formItems\">\r\n            <Field name=\"idWorker\" component=\"select\">\r\n                <option value=\"\">Select employee...</option>\r\n                {w.map(w => (\r\n                    <option value={w.id} key={w.name}>\r\n                        {w.name}\r\n                    </option>\r\n                ))}\r\n            </Field>\r\n        </div>\r\n        <div className=\"formItems\">\r\n            <Field name={\"deadline\"} showTime={true} component={renderDateTimePicker}/>\r\n        </div>\r\n        <div className=\"formItems\">\r\n            <h3>Выберите место на карте</h3>\r\n            <Field name={\"taskAddress\"} component={MyCustomInput}/>\r\n        </div>\r\n        <button>Create Task</button>\r\n    </Form>\r\n};\r\n\r\nconst TaskReduxForm = reduxForm({\r\n    form: 'task',\r\n    enableReinitialize: true,\r\n})(TaskForm);\r\n\r\nexport default TaskReduxForm;\r\n","import React, {Component} from \"react\";\r\nimport \"../../components/Map/Map.css\"\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    delCoordPoint,\r\n    getAddress,\r\n    requestTasks,\r\n    requestWorkers,\r\n    setData,\r\n    setTask,\r\n    taskFilter\r\n} from \"../../state/map-reducer\";\r\nimport \"./MapContainer.css\"\r\nimport {\r\n    getAddressTempSelector,\r\n    getCoordTempSelector, getFilteredTasks,\r\n    getTasksSelector,\r\n    getTestDataSelector,\r\n    getWorkersSelector\r\n} from \"../../state/map-selectors\";\r\nimport YandexMaps from \"../../components/Map/Map\";\r\nimport TaskFilterReduxForm from \"../../components/Forms/TaskFilterForm\";\r\nimport TaskReduxForm from \"../../components/Forms/TaskReduxForm\"\r\n\r\nclass MapContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        //setInterval(() => {this.setState({a:12})}, 3000)\r\n        let {requestWorkers, requestTasks} = this.props;\r\n        requestWorkers();\r\n        requestTasks();\r\n    }\r\n\r\n    render() {\r\n        console.log(\"RENDERED\")\r\n        const onSubmitTask = (formData) => {\r\n            this.props.setTask(formData.taskName, formData.idWorker, formData.description, formData.deadline, formData.taskAddress)\r\n        };\r\n        let {addressTemp, workers, filteredTasks, taskFilter} = this.props;\r\n        return (\r\n            <div className=\"MapContainerWrapper\">\r\n                <div className=\"taskPanel\">\r\n                    <h3>Add Task</h3>\r\n                    <TaskReduxForm initialValues={{taskAddress: addressTemp}} w={workers} onSubmit={onSubmitTask}/>\r\n                    <h3>All Tasks</h3>\r\n                    <TaskFilterReduxForm w={workers} filteredTasks={filteredTasks} taskFilter={taskFilter}/>\r\n                </div>\r\n                <YandexMaps {...this.props}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    coordsTemp: getCoordTempSelector(state),\r\n    workers: getWorkersSelector(state),\r\n    tasks: getTasksSelector(state),\r\n    testData: getTestDataSelector(state),\r\n    addressTemp: getAddressTempSelector(state),\r\n    filteredTasks: getFilteredTasks(state)\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getAddress,\r\n    delCoordPoint,\r\n    setData,\r\n    requestWorkers,\r\n    requestTasks,\r\n    taskFilter,\r\n    setTask\r\n})(MapContainer);\r\n","import React from \"react\";\r\nimport \"./Header.css\"\r\n\r\nlet Header = (props) => {\r\n    return (\r\n        <div className=\"Header\">\r\n            <div className=\"logo\">\r\n                <a>GA Team</a>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport MapContainer from \"./containers/MapContainer/MapContainer\";\r\nimport './App.css';\r\nimport Header from \"./components/Header/Header\";\r\n\r\nconst App = (props) => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n            <Header classname=\"Header\" />\r\n            <MapContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport mapReducer from \"./map-reducer\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport thunkMiddleware from \"redux-thunk\" //import thunkmiddleware\r\n\r\nlet reducers = combineReducers({\r\n    mapReducer,\r\n    form: formReducer\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./state/redux-store\"\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ppp\":\"TaskFilterForm_ppp__3kGMw\"};"],"sourceRoot":""}