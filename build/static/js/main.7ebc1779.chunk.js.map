{"version":3,"sources":["api/api.js","state/map-reducer.js","state/map-selectors.js","components/Map/Map.jsx","components/Forms/TaskFilterForm.jsx","components/TaskPanel/common/ReduxFormComponents/DateTimePicker/renderDateTimePicker.js","components/TaskPanel/common/ReduxFormComponents/CoordAddressComponent/renderCoordAddress.js","components/Forms/TaskReduxForm.jsx","containers/MapContainer/MapContainer.jsx","components/Header/Header.jsx","App.js","serviceWorker.js","state/redux-store.js","index.js","components/Forms/TaskFilterForm.module.css"],"names":["instance","axios","withCredentials","baseURL","headers","taskAPI","get","coordPoint","initialState","coordsTemp","addressTemp","workers","id","name","tasks","testData","tsk","time","filteredTasks","setData","selectedEmployee","empTask","taskTime","taskAddress","type","mapReducer","state","action","address","filter","u","coords","pointId","coordPointAdd","t","getCoordTempSelector","getWorkersSelector","getTasksSelector","getTestDataSelector","getAddressTempSelector","getFilteredTasks","YandexMaps","getAddress","delCoordPoint","searchControlRef","useRef","placeMark","properties","hintContent","modules","removeCoordPoint","e","geometry","_coordinates","enterprise","query","apikey","className","onClick","defaultState","center","zoom","map","onResultShow","current","b","getMap","console","log","instanceRef","options","float","noPlacemark","TaskFilterForm","w","taskFilter","styles","ppp","onChange","currentTarget","value","key","Date","c","String","momentLocalizer","moment","renderDateTimePicker","input","showTime","format","MyCustomInput","props","v","TaskReduxForm","reduxForm","form","enableReinitialize","handleSubmit","Form","onSubmit","Field","placeholder","component","MapContainer","this","requestWorkers","requestTasks","initialValues","formData","Component","connect","dispatch","then","response","data","GeoObjectCollection","featureMember","GeoObject","metaDataProperty","GeocoderMetaData","text","setAddress","Header","App","classname","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.7ebc1779.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\n\r\nconst instance =  axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'localhost',\r\n    headers: {}\r\n});\r\n\r\nexport const taskAPI = {\r\n    sendTask(selectedEmployee, empTask, taskTime, taskAddress) {\r\n        return instance.post(``, {selectedEmployee, empTask, taskTime, taskAddress});\r\n    },\r\n\r\n    getTasks() {\r\n        return instance.get(``);\r\n    },\r\n\r\n    getWorkers() {\r\n        return instance.get(``);\r\n    },\r\n\r\n    geodecode(coordPoint) {\r\n        return axios.get(`https://geocode-maps.yandex.ru/1.x/?format=json&apikey=a2b8af4a-0675-4706-aafc-c386bc1661ee&geocode=${coordPoint[1]},${coordPoint[0]}`)\r\n    }\r\n};\r\n","import {taskAPI} from \"../api/api\";\r\n\r\nconst DEL_COORD_POINT = 'map/DEL_COORD_POINT';\r\nconst SET_TASK = 'map/SET_TASK';\r\nconst SET_ADDRESS = 'map/SET_ADDRESS';\r\nconst SET_TASKS_ARR = 'map/SET_TASKS_ARR';\r\nconst SET_WORKERS = 'map/SET_WORKERS';\r\nconst TASK_FILTER = 'map/TASK_FILTER'\r\n\r\nlet initialState = {\r\n    coordsTemp: [],\r\n    addressTemp: [],\r\n    workers: [\r\n        {id: 0, name: \"Lex\"},\r\n        {id: 1, name: \"Lev\"},\r\n        {id: 2, name: \"Nik\"},\r\n        {id: 3, name: \"Lis\"}\r\n    ],\r\n    tasks: [],\r\n    testData: [{tsk: \"tsk1\", time: '1995-12-19T03:24:00'}, {tsk: \"tsk2\", time: '2019-10-25T21:29:00'}, {\r\n        tsk: \"tsk3\",\r\n        time: '2019-10-25T22:28:00'\r\n    }],\r\n    filteredTasks: []\r\n};\r\n\r\nlet mapReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TASK:\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, {\r\n                    selectedEmployee: action.selectedEmployee,\r\n                    empTask: action.empTask,\r\n                    taskTime: action.taskTime,\r\n                    address: action.taskAddress\r\n                }],\r\n                addressTemp: []\r\n            };\r\n        case SET_TASKS_ARR:\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks\r\n            };\r\n        case DEL_COORD_POINT:\r\n            return {\r\n                ...state,\r\n                addressTemp: state.addressTemp.filter(u => u.coords !== action.pointId)\r\n            };\r\n        case SET_ADDRESS:\r\n            return {\r\n                ...state,\r\n                addressTemp: [...state.addressTemp, {address: action.address, coords: action.coordPointAdd}]\r\n            };\r\n        case SET_WORKERS:\r\n            return {\r\n                ...state,\r\n                workers: action.workers\r\n            };\r\n        case TASK_FILTER:\r\n            return {\r\n                ...state,\r\n                filteredTasks: (action.id === 'all_tasks')\r\n                    ? state.tasks\r\n                    : state.tasks.filter(t => t.selectedEmployee === action.id)\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const taskFilter = (id) => {\r\n    return {\r\n        type: TASK_FILTER,\r\n        id\r\n    }\r\n};\r\n\r\nexport const setAddress = (address, coordPointAdd) => {\r\n    return {\r\n        type: SET_ADDRESS,\r\n        address,\r\n        coordPointAdd\r\n    }\r\n};\r\n\r\nexport const delCoordPoint = (pointId) => {\r\n    return {\r\n        type: DEL_COORD_POINT,\r\n        pointId\r\n    }\r\n};\r\n\r\nexport const setData = (selectedEmployee, empTask, taskTime, taskAddress) => {\r\n    return {\r\n        type: SET_TASK,\r\n        selectedEmployee,\r\n        empTask,\r\n        taskTime,\r\n        taskAddress\r\n    }\r\n};\r\n\r\nexport const setTasksArr = (tasks) => {\r\n    return {\r\n        type: SET_TASKS_ARR,\r\n        tasks\r\n    }\r\n};\r\n\r\nexport const setWorkers = (workers) => {\r\n    return {\r\n        type: SET_WORKERS,\r\n        workers\r\n    }\r\n}\r\n\r\nexport const getAddress = (coordPointAdd) => {\r\n    return (dispatch) => {\r\n        taskAPI.geodecode(coordPointAdd).then(response => {\r\n            let address = response.data.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.text;\r\n            dispatch(setAddress(address, coordPointAdd))\r\n        })\r\n    }\r\n};\r\n\r\n//send task to server + set task in state store\r\nexport const setTask = (selectedEmployee, empTask, taskTime, taskAddress) => {\r\n    return (dispatch) => {\r\n        taskAPI.sendTask(selectedEmployee, empTask, taskTime, taskAddress).then(response => {\r\n            dispatch(setData(selectedEmployee, empTask, taskTime, taskAddress))\r\n        })\r\n    }\r\n};\r\n\r\n//request list of tasks\r\nexport const requestTasks = () => {\r\n    return (dispatch) => {\r\n        taskAPI.getTasks().then(response => {\r\n            console.log(response.data);\r\n            dispatch(setTasksArr(response.data))\r\n        })\r\n    }\r\n}\r\n\r\n//request list of workers\r\nexport const requestWorkers = () => {\r\n    return (dispatch) => {\r\n        taskAPI.getWorkers().then(response => {\r\n            console.log(response.data);\r\n            dispatch(setWorkers(response.data))\r\n        })\r\n    }\r\n}\r\n\r\nexport default mapReducer;\r\n","export const getCoordTempSelector = (state) => {\r\n    return state.mapReducer.coordsTemp\r\n};\r\n\r\nexport const getWorkersSelector = (state) => {\r\n    return state.mapReducer.workers\r\n};\r\n\r\nexport const getTasksSelector = (state) => {\r\n    return state.mapReducer.tasks\r\n};\r\n\r\nexport const getTestDataSelector = (state) => {\r\n    return state.mapReducer.testData\r\n};\r\n\r\nexport const getAddressTempSelector = (state) => {\r\n    return state.mapReducer.addressTemp\r\n};\r\nexport const getFilteredTasks = (state) => {\r\n    return state.mapReducer.filteredTasks\r\n}\r\n\r\n","import React, { useRef } from \"react\";\r\nimport {Map, Placemark, SearchControl, YMaps} from \"react-yandex-maps\";\r\nimport \"./Map.css\";\r\n\r\nlet YandexMaps = ({getAddress, delCoordPoint, addressTemp, testData}) => {\r\n    const searchControlRef = useRef(null);\r\n\r\n    const placeMark = {\r\n        //geometry: props.coords,\r\n        properties: {\r\n            hintContent: `Пункт назначения`,\r\n            /*\r\n                        balloonContent: 'Это балун',\r\n            */\r\n            //iconContent: \"Средний уровень\"\r\n        },\r\n        modules: [/*'geoObject.addon.balloon',*/ 'geoObject.addon.hint', 'geocode']\r\n    };\r\n\r\n    let setCoordPoint = (e) => {\r\n        let coordPoint = e.get(\"coords\");\r\n        getAddress(coordPoint);\r\n    };\r\n\r\n    let removeCoordPoint = (e) => {\r\n        let pointId = e.get('target').geometry._coordinates;\r\n        delCoordPoint(pointId)\r\n    };\r\n\r\n    const onResultShow = () => {\r\n        if (searchControlRef.current) {\r\n            // Тут вызвать метод который наиболее подходит\r\n            // https://tech.yandex.ru/maps/jsapi/doc/2.1/ref/reference/control.SearchControl-docpage/\r\n            let b = searchControlRef.current.getMap();\r\n            console.log(b)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <YMaps  enterprise\r\n               query={{\r\n                   apikey: 'a2b8af4a-0675-4706-aafc-c386bc1661ee',\r\n               }}>\r\n            <div className=\"htm\">\r\n              <Map className=\"content_map\" onClick={setCoordPoint} defaultState={{center: [59.927575, 30.326017], zoom: 9}} >\r\n                {addressTemp.map(u =>\r\n                    <Placemark onClick={removeCoordPoint} geometry={u.coords} {...placeMark} />\r\n                )}\r\n\r\n                {testData.map(u =>\r\n                    <Placemark geometry={u.coords} {...placeMark} />\r\n                )}\r\n                <SearchControl onResultShow={onResultShow} instanceRef={searchControlRef} options={{float: 'left', noPlacemark: true}}/>\r\n            </Map>\r\n            </div>\r\n        </YMaps>\r\n    )\r\n};\r\n\r\nexport default YandexMaps;\r\n","import React from \"react\";\r\nimport styles from \"./TaskFilterForm.module.css\"\r\n\r\nconst TaskFilterForm = ({w, filteredTasks, taskFilter}) => {\r\n    let onChangeFilter = (e) => {\r\n        let id = e.currentTarget.value;\r\n        taskFilter(id)\r\n    }\r\n    return <div className={styles.ppp}>\r\n        <select onChange={onChangeFilter}>\r\n            <option value=\"\">Select worker for filtering ...</option>\r\n            <option value=\"all_tasks\">Show All Tasks</option>\r\n            {w.map(w => (\r\n                <option value={w.name} key={w.name}>\r\n                    {w.name}\r\n                </option>\r\n            ))}\r\n        </select>\r\n\r\n        <div className=\"tasks\">\r\n            {filteredTasks.map(t => (new Date(t.taskTime) < new Date())\r\n                ? <div key={t.name}>Время истекло</div>\r\n                : <div key={t.name} className=\"taskItemLI\">\r\n                    <ul className=\"taskItemUL\">\r\n                    </ul>\r\n                    <ul>\r\n                        <li>Task - {t.empTask}</li>\r\n                        <li>Worker - {t.selectedEmployee}</li>\r\n                        <li>Address - {t.address.map(c => c.address)}</li>\r\n                        <li>Deadline - {String(t.taskTime)}</li>\r\n                    </ul>\r\n                </div>)}\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n};\r\n\r\nexport default TaskFilterForm;\r\n","import DateTimePicker from \"react-widgets/lib/DateTimePicker\";\r\nimport React from \"react\";\r\nimport momentLocalizer from \"react-widgets-moment\"\r\nimport 'react-widgets/dist/css/react-widgets.css'\r\nimport moment from \"moment\";\r\nmomentLocalizer(moment);\r\n\r\n\r\n\r\nexport const renderDateTimePicker = ({input: {onChange, value}, showTime}) => {\r\n    return (\r\n        <DateTimePicker\r\n            onChange={onChange}\r\n            format=\"DD MMM YYYY\"\r\n            time={showTime}\r\n            value={!value ? null : new Date(value)}\r\n        />)\r\n};\r\n","import React from 'react'\r\n\r\nconst MyCustomInput = (props) => {\r\n    return (\r\n        <div className=\"tasks\">\r\n            <ul onChange={e => props.input.onChange(e)}>\r\n                {props.input.value.map(v => <li>{v.address}</li>)}\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MyCustomInput\r\n","import {Field, Form, reduxForm} from \"redux-form\";\r\nimport {renderDateTimePicker} from \"../TaskPanel/common/ReduxFormComponents/DateTimePicker/renderDateTimePicker\";\r\nimport MyCustomInput from \"../TaskPanel/common/ReduxFormComponents/CoordAddressComponent/renderCoordAddress\";\r\nimport React from \"react\";\r\nimport styles from \"./TaskFilterForm.module.css\"\r\n\r\nconst TaskForm = ({handleSubmit, w}) => {\r\n    return <Form className={styles.ppp} onSubmit={handleSubmit}>\r\n        <div className=\"formItems\">\r\n            <Field placeholder={\"Enter task...\"} name={\"empTask\"} component={\"textarea\"}/>\r\n        </div>\r\n        <div className=\"formItems\">\r\n            <Field name=\"selectedEmployee\" component=\"select\">\r\n                <option value=\"\">Select employee...</option>\r\n                {w.map(w => (\r\n                    <option value={w.name} key={w.name}>\r\n                        {w.name}\r\n                    </option>\r\n                ))}\r\n            </Field>\r\n        </div>\r\n        <div className=\"formItems\">\r\n            <Field name={\"taskTime\"} showTime={true} component={renderDateTimePicker}/>\r\n        </div>\r\n        <div className=\"formItems\">\r\n            <h3>Выберите место на карте</h3>\r\n            <Field name={\"taskAddress\"} component={MyCustomInput}/>\r\n        </div>\r\n        <button>Create Task</button>\r\n    </Form>\r\n};\r\n\r\nconst TaskReduxForm = reduxForm({\r\n    form: 'task',\r\n    enableReinitialize: true,\r\n})(TaskForm);\r\n\r\nexport default TaskReduxForm;\r\n","import React, {Component} from \"react\";\r\nimport \"../../components/Map/Map.css\"\r\nimport {connect} from \"react-redux\";\r\nimport {delCoordPoint, getAddress, requestTasks, requestWorkers, setData, taskFilter} from \"../../state/map-reducer\";\r\nimport \"./MapContainer.css\"\r\nimport {\r\n    getAddressTempSelector,\r\n    getCoordTempSelector, getFilteredTasks,\r\n    getTasksSelector,\r\n    getTestDataSelector,\r\n    getWorkersSelector\r\n} from \"../../state/map-selectors\";\r\nimport YandexMaps from \"../../components/Map/Map\";\r\nimport TaskFilterReduxForm from \"../../components/Forms/TaskFilterForm\";\r\nimport TaskReduxForm from \"../../components/Forms/TaskReduxForm\"\r\n\r\n\r\nclass MapContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        //setInterval(() => {this.setState({a:12})}, 3000)\r\n        let {requestWorkers, requestTasks} = this.props;\r\n        requestWorkers();\r\n        requestTasks();\r\n    }\r\n\r\n    render() {\r\n        console.log(\"RENDERED\")\r\n        const onSubmitTask = (formData) => {\r\n            this.props.setData(formData.selectedEmployee, formData.empTask, formData.taskTime, formData.taskAddress)\r\n        };\r\n        let {addressTemp, workers, filteredTasks, taskFilter} = this.props;\r\n        return (\r\n            <div className=\"MapContainerWrapper\">\r\n                <div className=\"taskPanel\">\r\n                    <h3>Add Task</h3>\r\n                    <TaskReduxForm initialValues={{taskAddress: addressTemp}} w={workers}\r\n                                   onSubmit={onSubmitTask}/>\r\n                    <h3>All Tasks</h3>\r\n                    <TaskFilterReduxForm w={workers} filteredTasks={filteredTasks}\r\n                                         taskFilter={taskFilter}/>\r\n                </div>\r\n                <YandexMaps {...this.props}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    coordsTemp: getCoordTempSelector(state),\r\n    workers: getWorkersSelector(state),\r\n    tasks: getTasksSelector(state),\r\n    testData: getTestDataSelector(state),\r\n    addressTemp: getAddressTempSelector(state),\r\n    filteredTasks: getFilteredTasks(state)\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getAddress,\r\n    delCoordPoint,\r\n    setData,\r\n    requestWorkers,\r\n    requestTasks,\r\n    taskFilter\r\n})(MapContainer);\r\n","import React from \"react\";\r\nimport \"./Header.css\"\r\n\r\nlet Header = (props) => {\r\n    return (\r\n        <div className=\"Header\">\r\n            <div className=\"logo\">\r\n                <a>GA Team</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport MapContainer from \"./containers/MapContainer/MapContainer\";\nimport './App.css';\nimport Header from \"./components/Header/Header\";\n\nconst App = (props) => {\n  return (\n    <div className=\"wrapper\">\n            <Header classname=\"Header\" />\n            <MapContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport mapReducer from \"./map-reducer\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport thunkMiddleware from \"redux-thunk\" //import thunkmiddleware\r\n\r\nlet reducers = combineReducers({\r\n    mapReducer,\r\n    form: formReducer\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./state/redux-store\"\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ppp\":\"TaskFilterForm_ppp__1oq5e\"};"],"sourceRoot":""}